# This .gitignore file should be placed at the root of your Unity project directory
#
# Get latest from https://github.com/github/gitignore/blob/main/Unity.gitignore
#
/McpGridGame/.utmp/
/McpGridGame/[Ll]ibrary/
/McpGridGame/[Tt]emp/
/McpGridGame/[Oo]bj/
/McpGridGame/[Bb]uild/
/McpGridGame/[Bb]uilds/
/McpGridGame/[Ll]ogs/
/McpGridGame/[Uu]ser[Ss]ettings/

# MemoryCaptures can get excessive in size.
# They also could contain extremely sensitive data
/McpGridGame/[Mm]emoryCaptures/

# Recordings can get excessive in size
/McpGridGame/[Rr]ecordings/

# Uncomment this line if you wish to ignore the asset store tools plugin
# /[Aa]ssets/AssetStoreTools*

# Autogenerated Jetbrains Rider plugin
/McpGridGame/[Aa]ssets/Plugins/Editor/JetBrains*

# Visual Studio cache directory
/McpGridGame/.vs/

# Gradle cache directory
/McpGridGame/.gradle/

# Autogenerated VS/MD/Consulo solution and project files
/McpGridGame/ExportedObj/
/McpGridGame/.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta
*.mdb.meta

# Unity3D generated file on crash reports
/McpGridGame/sysinfo.txt

# Builds
*.apk
*.aab
*.unitypackage
*.unitypackage.meta
*.app

# Crashlytics generated file
/McpGridGame/crashlytics-build.properties

# Packed Addressables
/McpGridGame/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*

# Temporary auto-generated Android Assets
/McpGridGame/[Aa]ssets/[Ss]treamingAssets/aa.meta
/McpGridGame/[Aa]ssets/[Ss]treamingAssets/aa/*

# build
/McpGridGame/builds

# Byte-compiled / optimized / DLL files
/Tools/__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
/Tools/.Python
/Tools/build/
/Tools/develop-eggs/
/Tools/dist/
/Tools/downloads/
/Tools/eggs/
/Tools/.eggs/
/Tools/lib/
/Tools/lib64/
/Tools/parts/
/Tools/sdist/
/Tools/var/
/Tools/wheels/
/Tools/share/python-wheels/
*.egg-info/
/Tools/.installed.cfg
*.egg
/Tools/MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
/Tools/pip-log.txt
/Tools/pip-delete-this-directory.txt

# Unit test / coverage reports
/Tools/htmlcov/
/Tools/.tox/
/Tools/.nox/
/Tools/.coverage
/Tools/.coverage.*
/Tools/.cache
/Tools/nosetests.xml
/Tools/coverage.xml
*.cover
*.py,cover
/Tools/.hypothesis/
/Tools/.pytest_cache/
/Tools/cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
/Tools/local_settings.py
/Tools/db.sqlite3
/Tools/db.sqlite3-journal

# Flask stuff:
/Tools/instance/
/Tools/.webassets-cache

# Scrapy stuff:
/Tools/.scrapy

# Sphinx documentation
/Tools/docs/_build/

# PyBuilder
/Tools/.pybuilder/
/Tools/target/

# Jupyter Notebook
/Tools/.ipynb_checkpoints

# IPython
/Tools/profile_default/
/Tools/ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
/Tools/.pdm.toml
/Tools/.pdm-python
/Tools/.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
/Tools/__pypackages__/

# Celery stuff
/Tools/celerybeat-schedule
/Tools/celerybeat.pid

# SageMath parsed files
/Tools/*.sage.py

# Environments
/Tools/.env
/Tools/.venv
/Tools/env/
/Tools/venv/
/Tools/ENV/
/Tools/env.bak/
/Tools/venv.bak/

# Spyder project settings
/Tools/.spyderproject
/Tools/.spyproject

# Rope project settings
/Tools/.ropeproject

# mkdocs documentation
/Tools/site

# mypy
/Tools/.mypy_cache/
/Tools/.dmypy.json
/Tools/dmypy.json

# Pyre type checker
/Tools/.pyre/

# pytype static type analyzer
/Tools/.pytype/

# Cython debug symbols
/Tools/cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
/Tools/.idea/
/McpGridGame/.idea/

# Ruff stuff:
/Tools/.ruff_cache/

# PyPI configuration file
/Tools/.pypirc